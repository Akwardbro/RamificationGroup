import RamificationGroup.UpperNumbering.phiReal
import RamificationGroup.ForMathlib.Analysis.Basic

open QuotientGroup IntermediateField DiscreteValuation Valued Valuation HerbrandFunction
open MeasureTheory.MeasureSpace
open Pointwise
open AlgEquiv AlgHom
open LocalRing ExtDVR
open Asymptotics Filter intervalIntegral MeasureTheory Function

variable (K K' L : Type*) {ŒìK : outParam Type*} [Field K] [Field K'] [Field L] [vK : Valued K ‚Ñ§‚Çò‚ÇÄ] [vK' : Valued K' ‚Ñ§‚Çò‚ÇÄ] [vL : Valued L ‚Ñ§‚Çò‚ÇÄ] [IsDiscrete vK.v] [IsDiscrete vK'.v] [IsDiscrete vL.v] [Algebra K L] [Algebra K K'] [Algebra K' L] [IsScalarTower K K' L] [IsValExtension vK.v vK'.v] [IsValExtension vK'.v vL.v] [IsValExtension vK.v vL.v] [Normal K K'] [Normal K L] [FiniteDimensional K L] [FiniteDimensional K K'] [FiniteDimensional K' L] [CompleteSpace K] [CompleteSpace K'] [Algebra.IsSeparable K' L] [Algebra.IsSeparable (IsLocalRing.ResidueField ‚Ü•ùí™[K']) (IsLocalRing.ResidueField ‚Ü•ùí™[L])]

local notation:max " G(" L:max "/" K:max ")^[" v:max "] " => upperRamificationGroup_aux K L v

theorem phiReal_comp_of_isValExtension_neg_aux [Normal K' L] {u : ‚Ñù} (hu : u < 0) : ((phiReal K K') ‚àò (phiReal K' L)) u = phiReal K L u := by
  rw [Function.comp_apply, phiReal_eq_self_of_le_zero K L (le_of_lt hu), phiReal_eq_self_of_le_zero K' L (le_of_lt hu), phiReal_eq_self_of_le_zero K K' (le_of_lt hu)]

noncomputable def phiDerivReal' (u : ‚Ñù) : ‚Ñù := (Nat.card G(L/K)_[(‚åäu‚åã + 1)] : ‚Ñù) / (Nat.card G(L/K)_[0])

theorem phiDerivReal'_antitone : Antitone (phiDerivReal' K L) := by
  intro x y hxy
  unfold phiDerivReal'
  apply (div_le_div_right _).2
  apply Nat.mono_cast
  apply Nat.card_mono
  exact Set.toFinite  (G(L/K)_[(‚åäx‚åã + 1)] : Set (L ‚âÉ‚Çê[K] L))
  apply lowerRamificationGroup.antitone
  linarith [Int.floor_le_floor (Œ± := ‚Ñù) hxy]
  simp only [Nat.cast_pos, Nat.card_pos]


theorem phiDerivReal'_eq_phiDerivReal_mul_of {u : ‚Ñù} (h : u = ‚åàu‚åâ) (h' : 0 < u) : phiDerivReal' K L u = phiDerivReal K L u * ((Nat.card G(L/K)_[(‚åàu‚åâ + 1)] : ‚Ñù) / (Nat.card G(L/K)_[‚åàu‚åâ] : ‚Ñù)) := by
  rw [phiDerivReal', phiDerivReal, max_eq_right, ‚Üê mul_div_mul_comm, mul_comm, mul_div_mul_comm, div_self, mul_one, h, Int.floor_intCast, Int.ceil_intCast]
  apply ne_of_gt
  simp only [Nat.cast_pos, Nat.card_pos]
  apply Int.ceil_nonneg (le_of_lt h')

theorem phiDerivReal'_eq_phiDerivReal_add_one_of {u : ‚Ñù} (h : u = ‚åàu‚åâ) (h' : 0 < u) : phiDerivReal' K L u = phiDerivReal K L (u + 1) := by
  rw [phiDerivReal', phiDerivReal, max_eq_right, h, Int.floor_intCast, Int.ceil_add_one, Int.ceil_intCast]
  apply Int.ceil_nonneg
  apply le_of_lt (lt_trans h' (by linarith))

theorem phiDerivReal'_eq_phiDerivReal_of {u : ‚Ñù} (h : u ‚â† ‚åàu‚åâ) (h' : 0 < u) : phiDerivReal' K L u = phiDerivReal K L u := by
  unfold phiDerivReal' phiDerivReal
  rw [max_eq_right (le_of_lt (Int.ceil_pos.2 h'))]
  have h1 : ‚åàu‚åâ = ‚åäu‚åã + 1 := by
    symm
    apply le_antisymm _ (Int.ceil_le_floor_add_one u)
    apply Int.add_one_le_of_lt
    apply lt_of_le_of_ne (Int.floor_le_ceil u)
    by_contra hc
    apply h
    apply le_antisymm
    exact Int.le_ceil u
    rw [‚Üê hc]
    exact Int.floor_le u
  rw [h1]


#check RamificationGroup_card_comp_aux
#check RamificationGroup_card_zero_comp_aux

variable [IsScalarTower ùí™[K] ùí™[K'] ùí™[L]] [Normal K' L] [Algebra.IsSeparable (IsLocalRing.ResidueField ‚Ü•ùí™[K']) (IsLocalRing.ResidueField ‚Ü•ùí™[L])] [Algebra.IsSeparable (IsLocalRing.ResidueField ‚Ü•ùí™[K]) (IsLocalRing.ResidueField ‚Ü•ùí™[L])] [Algebra.IsSeparable (IsLocalRing.ResidueField ‚Ü•ùí™[K]) (IsLocalRing.ResidueField ‚Ü•ùí™[K'])] [Algebra.IsSeparable K K'] [Algebra.IsSeparable K L] [Algebra.IsSeparable ‚Ü•ùí™[K'] ‚Ü•ùí™[L]]

theorem phiDerivReal'_comp_zero {gen : ‚Ü•ùí™[L]}
  (hgen : Algebra.adjoin ‚Ü•ùí™[K] {gen} = ‚ä§) {gen' : ‚Ü•ùí™[L]} (hgen' : Algebra.adjoin ‚Ü•ùí™[K'] {gen'} = ‚ä§) {gen'' : ‚Ü•ùí™[K']} (hgen'' : Algebra.adjoin ‚Ü•ùí™[K] {gen''} = ‚ä§) : (phiDerivReal' K' L 0) * (phiDerivReal' K K' (phiReal K' L 0)) = phiDerivReal' K L 0 := by
  unfold phiDerivReal'
  simp only [phiReal_zero_eq_zero, Int.floor_zero, zero_add, ‚Üê mul_div_mul_comm]
  congr
  rw [‚Üê Int.ceil_one (Œ± := ‚Ñù), ‚Üê RamificationGroup_card_comp_aux K K' L (by linarith) hgen hgen', mul_comm, mul_eq_mul_right_iff]
  left
  have hp : ‚åàphiReal K' L 1‚åâ = 1 := by
    apply Int.ceil_eq_iff.2
    simp only [Int.cast_one, sub_self]
    constructor
    ¬∑ rw [‚Üê phiReal_zero_eq_zero K' L]
      apply phiReal_StrictMono K' L (by linarith)
    ¬∑ apply phiReal_one_le_one K' L
  rw [Nat.cast_inj, Nat.card_congr, herbrand_Real K K' L 1 (by linarith) hgen'' hgen hgen', hp]
  simp only [Int.ceil_one]
  exact Equiv.setCongr rfl
  rw[mul_comm, RamificationGroup_card_zero_comp_aux K K' L]

theorem phiDerivReal'_comp {u : ‚Ñù} (h : 0 < u) {gen : ùí™[L]} (hgen : Algebra.adjoin ùí™[K] {gen} = ‚ä§) {gen' : ùí™[L]} (hgen' : Algebra.adjoin ùí™[K'] {gen'} = ‚ä§) {gen'' : ùí™[K']} (hgen'' : Algebra.adjoin ùí™[K] {gen''} = ‚ä§) {gen''' : ùí™[L]} (hgen''' : Algebra.adjoin ùí™[K] {gen'''} = ‚ä§) : (phiDerivReal' K' L u) * phiDerivReal' K K' (phiReal K' L u) = phiDerivReal' K L u := by
  have h' : ‚àÉ v : ‚Ñù, ‚åàv‚åâ = ‚åäu‚åã + 1 ‚àß ‚åàphiReal K' L v‚åâ = ‚åäphiReal K' L u‚åã + 1 := by
    have h'' : ‚àÉ v : ‚Ñù, v ‚àà Set.Ioc u (‚åäu‚åã + 1) ‚àß v ‚àà Set.Ioc u (u + ‚åäphiReal K' L u‚åã + 1 - phiReal K' L u) := by
      simp only [‚Üê Set.mem_inter_iff, ‚Üê Set.nonempty_def, Set.Ioc_inter_Ioc, le_refl, sup_of_le_left, Set.nonempty_Ioc, lt_inf_iff, Int.lt_floor_add_one, true_and, add_assoc, add_sub_assoc, lt_add_iff_pos_right]
      rw [add_sub_assoc', sub_pos]
      exact Int.lt_floor_add_one (phiReal K' L u)
    obtain ‚ü®v, hv1, hv2‚ü© := h''
    use v
    constructor
    ¬∑ apply Int.ceil_eq_iff.2
      constructor
      ¬∑ simp only [Int.cast_add, Int.cast_one, add_sub_cancel_right]
        apply lt_of_le_of_lt (Int.floor_le u) (Set.mem_Ioc.1 hv1).1
      ¬∑ apply_mod_cast (Set.mem_Ioc.1 hv1).2
    ¬∑ apply Int.ceil_eq_iff.2
      constructor
      ¬∑ simp only [Int.cast_add, Int.cast_one, add_sub_cancel_right]
        apply lt_of_le_of_lt (Int.floor_le (phiReal K' L u))
        apply phiReal_StrictMono K' L (Set.mem_Ioc.1 hv1).1
      ¬∑ rw [‚Üê add_le_add_iff_right (-phiReal K' L u), ‚Üê sub_eq_add_neg]
        calc
            _ ‚â§ (v - u) * phiDerivReal K' L u := by
              apply phiReal_sub_phiReal_le K' L (le_of_lt (Set.mem_Ioc.1 hv1).1) h
            _ ‚â§ v - u := by
              nth_rw 2 [‚Üê mul_one (v - u)]
              rw [mul_le_mul_left]
              apply phiDerivReal_le_one K' L h
              apply lt_add_neg_iff_lt.2 (Set.mem_Ioc.1 hv1).1
            _ ‚â§ _ := by
              rw [‚Üê sub_eq_add_neg, tsub_le_iff_left]
              convert (Set.mem_Ioc.1 hv2).2 using 1
              simp only [Int.cast_add, Int.cast_one, add_assoc, add_sub_assoc]
  obtain ‚ü®v, hv1, hv2‚ü© := h'
  have hv : 0 ‚â§ v := by
    apply le_of_lt
    rw [‚Üê Int.ceil_pos, hv1]
    have : 0 ‚â§ ‚åäu‚åã := Int.floor_nonneg.mpr (le_of_lt h)
    linarith
  obtain hcm := phiDerivReal_comp K K' L hv hgen hgen' hgen'' hgen'''
  unfold phiDerivReal at hcm
  rw [max_eq_right, max_eq_right] at hcm
  unfold phiDerivReal'
  rw [‚Üê hv1, ‚Üê hv2, hcm]
  ¬∑ rw [hv2]
    have h' : 0 ‚â§ ‚åäphiReal K' L u‚åã := by
      apply Int.floor_nonneg.2 (le_of_lt (phiReal_pos_of_pos K' L h))
    exact Int.le_add_one h'
  ¬∑ rw [hv1]
    have h' : 0 ‚â§ ‚åäu‚åã := Int.floor_nonneg.2 (le_of_lt h)
    exact Int.le_add_one h'

#check Int.ceil_eq_add_one_sub_fract
#check Int.fract
theorem phiReal_eq_sum_card' {u : ‚Ñù} (hu : 0 < u) : phiReal K L u = (1 / Nat.card G(L/K)_[0]) * ((‚àë x in Finset.Icc 1 ‚åäu‚åã, Nat.card G(L/K)_[x]) + (u - (max 0 ‚åäu‚åã)) * (Nat.card G(L/K)_[(‚åäu‚åã + 1)])) := by
  rw [phiReal_eq_sum_card K L (le_of_lt hu), mul_eq_mul_left_iff]
  left
  by_cases hc : ‚åàu‚åâ - 1 = ‚åäu‚åã
  ¬∑ simp only [hc, Int.cast_max, Int.cast_zero, add_comm ‚åäu‚åã, ‚Üê (eq_add_of_sub_eq' hc)]
  ¬∑ have h2 : ‚åäu‚åã = u := by
      by_contra hcon
      apply hc
      rw [‚Üê Int.cast_inj (Œ± := ‚Ñù), Int.cast_sub, Int.ceil_eq_add_one_sub_fract, Int.fract]
      ring
      unfold Int.fract
      exact sub_ne_zero_of_ne fun a ‚Ü¶ hcon (id (Eq.symm a))
    have h1 : ‚åàu‚åâ = u := by rw [‚Üê h2, Int.ceil_intCast]
    have h3 : ‚åàu‚åâ = ‚åäu‚åã := by rw [‚Üê Int.cast_inj (Œ± := ‚Ñù), h1, h2]
    have h' : Finset.Icc 1 ‚åäu‚åã = Finset.Icc 1 (‚åäu‚åã - 1) ‚à™ {‚åäu‚åã} := by
      ext x
      constructor
      <;>intro hx
      ¬∑ apply Finset.mem_union.2
        by_cases hx' : x ‚â§ ‚åäu‚åã - 1
        ¬∑ left
          apply Finset.mem_Icc.2
          refine ‚ü®(Finset.mem_Icc.1 hx).1, hx'‚ü©
        ¬∑ right
          simp only [Finset.mem_singleton]
          apply eq_of_le_of_not_lt (Finset.mem_Icc.1 hx).2
          push_neg at *
          rw [‚Üê sub_add_cancel ‚åäu‚åã 1]
          apply (Int.add_one_le_iff (a := ‚åäu‚åã - 1) (b := x)).2 hx'
      ¬∑ rw [Finset.mem_union] at hx
        match hx with
        | Or.inl hx =>
                      apply Finset.mem_Icc.2
                      refine ‚ü®(Finset.mem_Icc.1 hx).1, le_trans (Finset.mem_Icc.1 hx).2 (by linarith)‚ü©
        | Or.inr hx =>
                      rw [Finset.mem_singleton] at hx
                      rw [hx]
                      apply Finset.right_mem_Icc.2
                      rw [‚Üê h3]
                      apply (Int.add_one_le_iff (a := 0) (b := ‚åàu‚åâ)).2 (Int.ceil_pos.2 hu)
    rw [h3, ‚Üê sub_eq_zero, ‚Üê sub_sub, add_sub_right_comm, max_eq_right, max_eq_right, add_sub_assoc, Int.cast_sub, h2, Nat.cast_sum, Int.cast_one, sub_sub_cancel, one_mul, sub_self, zero_mul, sub_zero, sub_add_comm, sub_add, sub_eq_zero, h', Finset.sum_union, Nat.cast_add, Nat.cast_sum, add_sub_cancel_left, Finset.sum_singleton]
    simp only [Finset.disjoint_singleton_right, Finset.mem_Icc, le_sub_self_iff, Int.reduceLE, and_false, not_false_eq_true]
    exact Int.floor_nonneg.2 (le_of_lt hu)
    rw [‚Üê h3]
    apply Int.le_sub_one_iff.2 (Int.ceil_pos.2 hu)

theorem phiReal_sub_phiReal_le' {u v : ‚Ñù} (h : u ‚â§ v) (h': 0 < u) : phiReal K L v - phiReal K L u ‚â§ (v - u) * phiDerivReal' K L u := by
  by_cases hc : u ‚â† ‚åàu‚åâ
  ¬∑ rw [phiDerivReal'_eq_phiDerivReal_of K L hc h']
    apply phiReal_sub_phiReal_le K L h h'
  ¬∑ push_neg at hc
    have h1 : Finset.Icc 1 ‚åäv‚åã = Finset.Icc 1 ‚åäu‚åã ‚à™ Finset.Icc (‚åäu‚åã + 1) ‚åäv‚åã := by
      ext x
      simp only [Finset.mem_union, Finset.mem_Icc]
      constructor
      <;> intro hx
      ¬∑ by_cases hc : x ‚â§ ‚åäu‚åã
        ¬∑ left
          refine ‚ü®hx.1, hc‚ü©
        ¬∑ right
          constructor
          ¬∑ push_neg at hc
            apply Int.le_of_sub_one_lt
            rw [add_sub_cancel_right]
            exact hc
          ¬∑ exact hx.2
      ¬∑ match hx with
        | Or.inl hx => refine ‚ü®hx.1, le_trans hx.2 (Int.floor_le_floor h)‚ü©
        | Or.inr hx => refine ‚ü®le_trans ?_ hx.1, hx.2‚ü©
                       simp only [le_add_iff_nonneg_left]
                       apply Int.floor_nonneg.2 (le_of_lt h')
    rw [phiReal_eq_sum_card' K L h', phiReal_eq_sum_card', phiDerivReal', ‚Üê mul_sub, one_div_mul_eq_div, ‚Üê mul_div_assoc, div_le_div_right, ‚Üê sub_sub, add_sub_right_comm, add_sub_assoc, h1, Finset.sum_union, Nat.cast_add, add_sub_cancel_left, max_eq_right, max_eq_right]
    calc
      _ ‚â§ ‚àë x ‚àà Finset.Icc (‚åäu‚åã + 1) ‚åäv‚åã, Nat.card G(L/K)_[(‚åäu‚åã + 1)] + ((v - ‚Üë‚åäv‚åã) * ‚Üë(Nat.card ‚Ü• G(L/K)_[(‚åäv‚åã + 1)] ) - (u - ‚Üë‚åäu‚åã) * ‚Üë(Nat.card ‚Ü• G(L/K)_[(‚åäu‚åã + 1)])) := by
        simp only [Int.cast_sub, Int.cast_one, add_le_add_iff_right, Nat.cast_le]
        apply Finset.sum_le_sum
        intro i hi
        apply Nat.card_mono
        exact Set.toFinite (G(L/K)_[(‚åäu‚åã + 1)] : Set (L ‚âÉ‚Çê[K] L))
        apply lowerRamificationGroup.antitone K L (Finset.mem_Icc.1 hi).1
      _ ‚â§  ‚àë x ‚àà Finset.Icc (‚åäu‚åã + 1) ‚åäv‚åã, Nat.card G(L/K)_[(‚åäu‚åã + 1)] + ((v - ‚Üë‚åäv‚åã) * ‚Üë(Nat.card ‚Ü• G(L/K)_[(‚åäu‚åã + 1)] ) - (u - ‚Üë‚åäu‚åã) * ‚Üë(Nat.card ‚Ü• G(L/K)_[(‚åäu‚åã + 1)])) := by
        simp only [add_le_add_iff_left, sub_eq_add_neg (b := (u - ‚Üë‚åäu‚åã) * ‚Üë(Nat.card ‚Ü• G(L/K)_[(‚åäu‚åã + 1)])), add_le_add_iff_right]
        by_cases hc : ‚åäv‚åã = v
        ¬∑ simp only [hc, sub_self, zero_mul, le_refl]
        ¬∑ rw [mul_le_mul_left, Nat.cast_le]
          apply Nat.card_mono
          exact Set.toFinite (G(L/K)_[(‚åäu‚åã + 1)] : Set (L ‚âÉ‚Çê[K] L))
          apply lowerRamificationGroup.antitone K L
          linarith [Int.floor_le_floor h]
          rw [sub_pos]
          exact lt_of_le_of_ne (Int.floor_le v) hc
      _ ‚â§ _ := by
        simp only [Finset.sum_const, Int.card_Icc, sub_add_cancel, smul_eq_mul, Nat.cast_mul]
        rw [‚Üê Int.cast_natCast, Int.toNat_of_nonneg, ‚Üê sub_mul, ‚Üê add_mul, Int.cast_sub]
        have h1 : (‚Üë(‚åäv‚åã + 1) - ‚Üë(‚åäu‚åã + 1) + (v - ‚Üë‚åäv‚åã - (u - ‚Üë‚åäu‚åã))) = v - u := by
          simp only [Int.cast_add, Int.cast_one]
          ring
        by_cases hc : u = v
        ¬∑ simp only [hc, Int.cast_add, Int.cast_one, sub_self, Int.self_sub_floor, add_zero, zero_mul, le_refl]
        ¬∑ rw [h1, mul_le_mul_left]
          rw [sub_pos]
          apply lt_of_le_of_ne h hc
        simp only [add_sub_add_right_eq_sub, sub_nonneg]
        apply Int.floor_le_floor h
    exact Int.floor_nonneg.2 (le_of_lt h')
    exact Int.floor_nonneg.2 (le_of_lt (lt_of_lt_of_le h' h))
    have h1 : Finset.Icc 1 ‚åäu‚åã = Finset.Ico 1 (‚åäu‚åã + 1) := rfl
    have h2 : Finset.Icc (‚åäu‚åã + 1) ‚åäv‚åã = Finset.Ico (‚åäu‚åã + 1) (‚åäv‚åã + 1) := rfl
    rw [h1, h2]
    apply Finset.Ico_disjoint_Ico_consecutive
    simp only [Nat.cast_pos, Nat.card_pos]
    apply lt_of_lt_of_le h' h


theorem le_phiReal_sub_phiReal' {u v : ‚Ñù} (h : u ‚â§ v) (h' : 0 < u) : (v - u) * phiDerivReal' K L v ‚â§ phiReal K L v - phiReal K L u := by
  by_cases hc : v ‚â† ‚åàv‚åâ
  ¬∑ rw [phiDerivReal'_eq_phiDerivReal_of K L hc]
    apply le_phiReal_sub_phiReal K L h h'
    apply lt_of_lt_of_le h' h
  ¬∑ push_neg at hc
    rw [phiDerivReal'_eq_phiDerivReal_mul_of K L hc]
    calc
      _ ‚â§  (v - u) * (phiDerivReal K L v) := by
        by_cases hc : u < v
        ¬∑ rw [‚Üê mul_one ((v - u) * (phiDerivReal K L v)), ‚Üê mul_assoc, mul_le_mul_left, div_le_one ,Nat.cast_le]
          apply Nat.card_mono
          exact Set.toFinite (G(L/K)_[‚åàv‚åâ] : Set (L ‚âÉ‚Çê[K] L))
          apply lowerRamificationGroup.antitone
          linarith
          simp only [Nat.cast_pos, Nat.card_pos]
          apply mul_pos (by linarith [hc])
          apply phiDerivReal_pos K L
        ¬∑ have heq : u = v := eq_of_le_of_not_lt h hc
          simp only [heq, sub_self, zero_mul, le_refl]
      _ ‚â§ _ := by
        apply le_phiReal_sub_phiReal K L h h'
    apply lt_of_lt_of_le h' h

variable {f g : Filter ‚Ñù}

set_option maxHeartbeats 0

theorem phiReal_linear_section {n : ‚Ñï} {x : ‚Ñù} (h : x ‚àà Set.Icc (n : ‚Ñù) (n + 1 : ‚Ñù)) : phiReal K L x = phiReal K L n + (1 / Nat.card G(L/K)_[0] : ‚Ñù) * (Nat.card G(L/K)_[(n + 1)]) * (x - n) := by
  by_cases hc : x = n
  ¬∑ simp only [hc, sub_self, one_div, mul_zero, add_zero]
  ¬∑ have hc' : ‚åàx‚åâ = n + 1 := by
      apply Int.ceil_eq_iff.2
      simp only [Int.cast_add, Int.cast_natCast, Int.cast_one, add_sub_cancel_right]
      refine ‚ü®lt_of_le_of_ne (Set.mem_Icc.1 h).1 ?_, (Set.mem_Icc.1 h).2‚ü©
      exact fun a ‚Ü¶ hc (id (Eq.symm a))
    have hx : 0 < x := by
      apply lt_of_le_of_lt (b := (n : ‚Ñù))
      exact Nat.cast_nonneg' n
      apply lt_of_le_of_ne (Set.mem_Icc.1 h).1
      exact fun a ‚Ü¶ hc (id (Eq.symm a))
    by_cases hc'' : n = 0
    ¬∑ rw [phiReal_eq_sum_card K L (le_of_lt hx)]
      simp only [hc', hc'', one_div, CharP.cast_eq_zero, zero_add, sub_self, zero_lt_one, Finset.Icc_eq_empty_of_lt, Finset.sum_empty, max_self, Int.cast_zero, sub_zero, phiReal_zero_eq_zero, zero_add]
      ring
    ¬∑ rw [phiReal_eq_sum_card K L (le_of_lt hx), hc', phiReal_eq_sum_card', Int.floor_natCast]
      simp only [one_div, add_sub_cancel_right, Nat.cast_sum, Nat.cast_nonneg, max_eq_right, Int.cast_natCast, sub_self, zero_mul, add_zero, mul_add]
      congr 1
      ring
      apply lt_of_le_of_ne (Nat.cast_nonneg' n)
      symm
      simp only [ne_eq, Nat.cast_eq_zero, hc'', not_false_eq_true]


theorem phiReal_HasDerivWithinAt {u : ‚Ñù} (h : 0 ‚â§ u) : HasDerivWithinAt (phiReal K L) (phiDerivReal' K L u) (Set.Ici u) u := by
  have hu : ‚åäu‚åã.toNat = ‚åäu‚åã := by
    apply Int.toNat_of_nonneg
    apply Int.floor_nonneg.2 h
  apply hasDerivWithinAt_Ioi_iff_Ici.1
  apply (HasDerivWithinAt.Ioi_iff_Ioo (y := (‚åäu‚åã : ‚Ñù) + 1) _).1
  apply HasDerivWithinAt.congr (f := fun x => phiReal K L ‚åäu‚åã + (1 / Nat.card G(L/K)_[0] : ‚Ñù) * (Nat.card G(L/K)_[(‚åäu‚åã + 1)]) * (x - ‚åäu‚åã))
  apply HasDerivWithinAt.congr_deriv (f' := 0 + (Nat.card G(L/K)_[(‚åäu‚åã + 1)] : ‚Ñù) / (Nat.card G(L/K)_[0] : ‚Ñù))
  apply HasDerivWithinAt.add
  apply hasDerivWithinAt_const
  apply HasDerivWithinAt.congr_deriv (f' := (1 / Nat.card G(L/K)_[0] : ‚Ñù) * (Nat.card G(L/K)_[(‚åäu‚åã + 1)]) * 1)
  apply HasDerivWithinAt.const_mul
  apply HasDerivWithinAt.sub_const
  apply hasDerivWithinAt_id
  simp only [one_div, mul_one, ‚Üê div_eq_inv_mul]
  unfold phiDerivReal'
  rw [zero_add]
  intro x hx
  rw [phiReal_linear_section K L (n := ‚åäu‚åã.toNat) (x := x), ‚Üê Int.cast_natCast, hu]
  rw [‚Üê Int.cast_natCast, hu, Set.mem_Icc]
  refine ‚ü®le_of_lt (lt_of_le_of_lt (Int.floor_le u) (Set.mem_Ioo.1 hx).1), le_of_lt (Set.mem_Ioo.1 hx).2‚ü©
  rw [phiReal_linear_section K L (n := ‚åäu‚åã.toNat) (x := u), ‚Üê Int.cast_natCast, hu]
  rw [‚Üê Int.cast_natCast, hu, Set.mem_Icc]
  refine ‚ü®Int.floor_le u, le_of_lt (Int.lt_floor_add_one u)‚ü©
  exact Int.lt_floor_add_one u


#check phiDerivReal'_comp
theorem phiReal_comp_HasDerivWithinAt {u : ‚Ñù} (h : 0 ‚â§ u) {gen : ùí™[L]} (hgen : Algebra.adjoin ùí™[K] {gen} = ‚ä§) {gen' : ùí™[L]} (hgen' : Algebra.adjoin ùí™[K'] {gen'} = ‚ä§) {gen'' : ùí™[K']} (hgen'' : Algebra.adjoin ùí™[K] {gen''} = ‚ä§) {gen''' : ùí™[L]} (hgen''' : Algebra.adjoin ùí™[K] {gen'''} = ‚ä§) : HasDerivWithinAt (phiReal K K' ‚àò phiReal K' L) (phiDerivReal' K L u) (Set.Ici u) u := by
  apply HasDerivWithinAt.congr_deriv (f' := phiDerivReal' K' L u * phiDerivReal' K K' (phiReal K' L u))
  apply HasDerivWithinAt.scomp (t' := Set.Ici (phiReal K' L u))
  apply phiReal_HasDerivWithinAt
  rw [‚Üê phiReal_zero_eq_zero K' L]
  apply (phiReal_StrictMono K' L).monotone h
  apply phiReal_HasDerivWithinAt K' L h
  apply Monotone.mapsTo_Ici (phiReal_StrictMono K' L).monotone
  by_cases hu : 0 < u
  ¬∑ rw [‚Üê phiDerivReal'_comp K K' L hu hgen hgen' hgen'' hgen''']
  ¬∑ have hu' : u = 0 := Eq.symm (eq_of_le_of_not_lt h hu)
    rw [hu', phiDerivReal'_comp_zero K K' L hgen hgen' hgen'']

theorem phiReal_continuousOn_section {n : ‚Ñï} : ContinuousOn (phiReal K L) (Set.Icc (n : ‚Ñù) (n + 1 : ‚Ñù)) := by
  let g : ‚Ñù ‚Üí ‚Ñù := fun x => phiReal K L n + (1 / Nat.card G(L/K)_[0] : ‚Ñù) * (Nat.card G(L/K)_[(n + 1)]) * (x - n)
  apply ContinuousOn.congr (f := g)
  apply ContinuousOn.add (continuousOn_const)
  apply ContinuousOn.mul (continuousOn_const)
  apply ContinuousOn.add (continuousOn_id' (Set.Icc (n : ‚Ñù) (n + 1 : ‚Ñù))) (continuousOn_const)
  intro x hx
  apply phiReal_linear_section K L hx

theorem phiReal_left_continuous {x : ‚Ñù} : ContinuousWithinAt (phiReal K L) (Set.Iic x) x := by
  by_cases hc : x ‚â§ 0
  ¬∑ apply ContinuousWithinAt.congr (f := fun t => t) (continuousWithinAt_id)
    intro y hy
    rw [phiReal_eq_self_of_le_zero]
    apply le_trans (Set.mem_Iic.1 hy) hc
    rw [phiReal_eq_self_of_le_zero K L hc]
  ¬∑ push_neg at hc
    have hx : (‚åàx‚åâ - 1).toNat = ‚åàx‚åâ - 1 := by
      apply Int.toNat_of_nonneg
      apply Int.le_of_sub_one_lt
      simp only [zero_sub, Int.reduceNeg, neg_lt_sub_iff_lt_add, lt_add_iff_pos_right, Int.ceil_pos]
      exact hc
    apply (continuousWithinAt_Icc_iff_Iic (a := (‚åàx‚åâ - 1 : ‚Ñù)) _).1
    apply ContinuousWithinAt.congr (f := fun t => (phiReal K L (‚åàx‚åâ - 1)) + ((1 / (Nat.card G(L/K)_[0] : ‚Ñù)) * (Nat.card G(L/K)_[(‚åàx‚åâ)] : ‚Ñù)) * (t - (‚åàx‚åâ - 1)))
    apply ContinuousWithinAt.add (continuousWithinAt_const)
    apply ContinuousWithinAt.mul (continuousWithinAt_const)
    apply ContinuousWithinAt.sub (continuousWithinAt_id) (continuousWithinAt_const)
    intro y hy
    rw [phiReal_linear_section K L (n := (‚åàx‚åâ - 1).toNat) (x := y), ‚Üê Int.cast_natCast, hx, sub_add_cancel, Int.cast_sub, Int.cast_one]
    rw [‚Üê Int.cast_natCast, hx, Int.cast_sub, Int.cast_one, sub_add_cancel,  Set.mem_Icc]
    refine ‚ü®(Set.mem_Icc.1 hy).1, le_trans (Set.mem_Icc.1 hy).2 (Int.le_ceil x)‚ü©
    rw [phiReal_linear_section K L (n := (‚åàx‚åâ - 1).toNat), ‚Üê Int.cast_natCast, hx, Int.cast_sub, Int.cast_one, one_div, sub_add_cancel]
    rw [‚Üê Int.cast_natCast, hx, Int.cast_sub, Int.cast_one, sub_add_cancel, Set.mem_Icc]
    refine ‚ü®by linarith [Int.ceil_lt_add_one x], Int.le_ceil x‚ü©
    linarith [Int.ceil_lt_add_one x]

theorem phiReal_right_continuous {x : ‚Ñù} : ContinuousWithinAt (phiReal K L) (Set.Ici x) x := by
  apply (continuousWithinAt_Icc_iff_Ici (b := (‚åäx‚åã + 1 : ‚Ñù)) _).1
  by_cases hc : x < 0
  ¬∑
    apply ContinuousWithinAt.congr (f := fun t => t) (continuousWithinAt_id)
    intro y hy
    apply phiReal_eq_self_of_le_zero
    apply le_trans (Set.mem_Icc.1 hy).2
    rw [‚Üê Int.cast_one (R := ‚Ñù), ‚Üê Int.cast_add, ‚Üê Int.cast_zero (R := ‚Ñù), Int.cast_le]
    apply Int.le_of_sub_one_lt
    rw [add_sub_cancel_right]
    apply_mod_cast lt_of_le_of_lt (Int.floor_le x) hc
    apply phiReal_eq_self_of_le_zero K L (le_of_lt hc)
  ¬∑ push_neg at hc
    have hx : ‚åäx‚åã.toNat = ‚åäx‚åã := Int.toNat_of_nonneg (Int.floor_nonneg.2 hc)
    apply ContinuousWithinAt.congr (f := fun t => (phiReal K L ‚åäx‚åã) + ((1 / (Nat.card G(L/K)_[0] : ‚Ñù)) * (Nat.card G(L/K)_[(‚åäx‚åã + 1)] : ‚Ñù)) * (t - ‚åäx‚åã))
    apply ContinuousWithinAt.add (continuousWithinAt_const)
    apply ContinuousWithinAt.mul (continuousWithinAt_const)
    apply ContinuousWithinAt.sub (continuousWithinAt_id) (continuousWithinAt_const)
    intro y hy
    rw [phiReal_linear_section K L (n := ‚åäx‚åã.toNat), ‚Üê Int.cast_natCast, hx]
    rw [‚Üê Int.cast_natCast, hx, Set.mem_Icc]
    refine ‚ü®le_trans (Int.floor_le x) (Set.mem_Icc.1 hy).1, (Set.mem_Icc.1 hy).2‚ü©
    rw [phiReal_linear_section K L (n := ‚åäx‚åã.toNat), ‚Üê Int.cast_natCast, hx]
    rw [‚Üê Int.cast_natCast, hx, Set.mem_Icc]
    refine ‚ü®Int.floor_le x, le_of_lt (Int.lt_floor_add_one x)‚ü©
  exact Int.lt_floor_add_one x

theorem phiReal_Continuous : Continuous (phiReal K L) := by
  apply continuous_iff_continuousAt.2
  intro x
  apply continuousAt_iff_continuous_left_right.2
  constructor
  ¬∑ exact phiReal_left_continuous K L
  ¬∑ exact phiReal_right_continuous K L

theorem phiReal_comp_continuousOn_section {n : ‚Ñï} : ContinuousOn (phiReal K K' ‚àò phiReal K' L) (Set.Icc (n : ‚Ñù) (n + 1 : ‚Ñù)) := by
  show ContinuousOn (fun x => phiReal K K' (phiReal K' L x)) (Set.Icc (n : ‚Ñù) (n + 1 : ‚Ñù))
  apply Continuous.comp_continuousOn'
  apply phiReal_Continuous
  apply phiReal_continuousOn_section


theorem phiReal_comp_of_isVal_Extension_pos_aux {n : ‚Ñï} {gen : ‚Ü•ùí™[L]} (hgen : Algebra.adjoin ‚Ü•ùí™[K] {gen} = ‚ä§) {gen' : ‚Ü•ùí™[L]} (hgen' : Algebra.adjoin ‚Ü•ùí™[K'] {gen'} = ‚ä§) {gen'' : ‚Ü•ùí™[K']} (hgen'' : Algebra.adjoin ‚Ü•ùí™[K] {gen''} = ‚ä§)
  {gen''' : ‚Ü•ùí™[L]} (hgen''' : Algebra.adjoin ‚Ü•ùí™[K] {gen'''} = ‚ä§) : ‚àÄ u ‚àà Set.Icc (n : ‚Ñù) (n + 1 : ‚Ñù), ((phiReal K K') ‚àò (phiReal K' L)) u = phiReal K L u := by
  induction' n with n hn
  ¬∑ intro u hu
    apply eq_of_has_deriv_right_eq (a := (0 : ‚Ñù)) (b := (1 : ‚Ñù)) (f' := phiDerivReal' K L)
    ¬∑ intro x hx
      apply phiReal_comp_HasDerivWithinAt K K' L (Set.mem_Ico.1 hx).1 hgen hgen' hgen'' hgen'''
    ¬∑ intro x hx
      apply phiReal_HasDerivWithinAt K L (Set.mem_Ico.1 hx).1
    ¬∑ convert phiReal_comp_continuousOn_section K K' L (n := 0)
      simp only [CharP.cast_eq_zero]
      simp only [CharP.cast_eq_zero, zero_add]
    ¬∑ convert phiReal_continuousOn_section K L (n := 0)
      simp only [CharP.cast_eq_zero]
      simp only [CharP.cast_eq_zero, zero_add]
    ¬∑ rw [Function.comp_apply, phiReal_zero_eq_zero, phiReal_zero_eq_zero, phiReal_zero_eq_zero]
    ¬∑ simp only [CharP.cast_eq_zero, zero_add] at hu
      exact hu
  ¬∑ intro u hu
    apply eq_of_has_deriv_right_eq (a := (n + 1 : ‚Ñù)) (b := (n + 2 : ‚Ñù)) (f' := phiDerivReal' K L)
    ¬∑ intro x hx
      apply phiReal_comp_HasDerivWithinAt K K' L (le_trans _ (Set.mem_Ico.1 hx).1) hgen hgen' hgen'' hgen'''
      apply le_trans (Nat.cast_nonneg' n) (by linarith)
    ¬∑ intro x hx
      apply phiReal_HasDerivWithinAt K L (le_trans _ (Set.mem_Ico.1 hx).1)
      apply le_trans (Nat.cast_nonneg' n) (by linarith)
    ¬∑ convert phiReal_comp_continuousOn_section K K' L (n := n + 1) using 1
      simp only [Nat.cast_add, Nat.cast_one, add_assoc, one_add_one_eq_two]
    ¬∑ convert phiReal_continuousOn_section K L (n := n + 1) using 1
      simp only [Nat.cast_add, Nat.cast_one, add_assoc, one_add_one_eq_two]
    ¬∑ apply hn (n + 1 : ‚Ñù)
      simp only [Set.mem_Icc, le_add_iff_nonneg_right, zero_le_one, le_refl, and_self]
    ¬∑ simp only [Nat.cast_add, Nat.cast_one, add_assoc, one_add_one_eq_two] at hu
      exact hu

@[simp]
theorem phi_comp_of_isValExtension' (u : ‚Ñö) {gen : ‚Ü•ùí™[L]} (hgen : Algebra.adjoin ‚Ü•ùí™[K] {gen} = ‚ä§) {gen' : ‚Ü•ùí™[L]} (hgen' : Algebra.adjoin ‚Ü•ùí™[K'] {gen'} = ‚ä§) {gen'' : ‚Ü•ùí™[K']} (hgen'' : Algebra.adjoin ‚Ü•ùí™[K] {gen''} = ‚ä§) {gen''' : ‚Ü•ùí™[L]} (hgen''' : Algebra.adjoin ‚Ü•ùí™[K] {gen'''} = ‚ä§) : (phi K K') ((phi K' L) u) = (phi K L) u := by
  by_cases hu : 0 ‚â§ u
  ¬∑ simp only [‚Üê Rat.cast_inj (Œ± := ‚Ñù)]
    rw [‚Üê phiReal_eq_phi K L hu, ‚Üê phiReal_eq_phi K K', ‚Üê phiReal_eq_phi K' L hu]
    apply phiReal_comp_of_isVal_Extension_pos_aux K K' L hgen hgen' hgen'' hgen''' (n := ‚åäu‚åã.toNat)
    simp only [Set.mem_Icc, Rat.natCast_le_cast]
    have hu':= Int.floor_nonneg.2 hu
    constructor <;> rw [‚Üê Int.cast_natCast, Int.toNat_of_nonneg hu']
    ¬∑ exact Int.floor_le u
    ¬∑ rw [‚Üê Rat.cast_one, ‚Üê Rat.cast_intCast, ‚Üê Rat.cast_add]
      apply Rat.cast_mono
      apply le_trans (Int.le_ceil u)
      rw [‚Üê Int.cast_one, ‚Üê Int.cast_add]
      apply Int.cast_mono
      apply Int.ceil_le_floor_add_one u
    apply phi_nonneg K' L hu
  ¬∑ push_neg at hu
    let hu' := le_of_lt hu
    rw [phi_eq_self_of_le_zero K' L hu', phi_eq_self_of_le_zero K K' hu', phi_eq_self_of_le_zero K L hu']


@[simp]
theorem phi_comp_of_isValExtension : (phi K K') ‚àò (phi K' L) = phi K L := by
  ext u
  apply phi_comp_of_isValExtension'
  repeat sorry

instance : Finite (L ‚âÉ‚Çê[K'] L) := Finite.algEquiv

@[simp]
theorem psi_comp_of_isValExtension {gen : ‚Ü•ùí™[L]}
  (hgen : Algebra.adjoin ‚Ü•ùí™[K] {gen} = ‚ä§) {gen' : ‚Ü•ùí™[K']} (hgen' : Algebra.adjoin ‚Ü•ùí™[K] {gen'} = ‚ä§) {gen'' : ‚Ü•ùí™[L]} (hgen'' : Algebra.adjoin ‚Ü•ùí™[K'] {gen''} = ‚ä§) : (psi K' L) ‚àò (psi K K') = psi K L := by
  unfold psi
  have hcomp : invFun (phi K' L) ‚àò invFun (phi K K') ‚àò (phi K K') ‚àò (phi K' L) = invFun (phi K L) ‚àò (phi K K') ‚àò (phi K' L) := by
    nth_rw 2 [phi_comp_of_isValExtension]
    rw [invFun_comp (phi_Bijective_aux K L hgen).injective, ‚Üê comp.assoc (invFun (phi K K')) (phi K K') (phi K' L), invFun_comp (phi_Bijective_aux K K' hgen').injective, id_comp, invFun_comp (phi_Bijective_aux K' L hgen'').injective]
  simp [Function.comp_left_cancel (phi_Bijective_aux K' L hgen'')] at hcomp
  apply Function.comp_left_cancel (phi_Bijective_aux K L hgen) hcomp

@[simp]
theorem psi_comp_of_isValExtension' (v : ‚Ñö) {gen : ‚Ü•ùí™[L]}
  (hgen : Algebra.adjoin ‚Ü•ùí™[K] {gen} = ‚ä§) {gen' : ‚Ü•ùí™[K']} (hgen' : Algebra.adjoin ‚Ü•ùí™[K] {gen'} = ‚ä§) {gen'' : ‚Ü•ùí™[L]} (hgen'' : Algebra.adjoin ‚Ü•ùí™[K'] {gen''} = ‚ä§)  : (psi K' L) ((psi K K') v) = psi K L v := by
  rw [‚Üê psi_comp_of_isValExtension (K := K) (K' := K') (L := L) hgen hgen' hgen'']
  simp

@[simp]
theorem herbrand' (v : ‚Ñö) {gen : ùí™[K']} (hgen : Algebra.adjoin ùí™[K] {gen} = ‚ä§) {gen' : ùí™[L]} (hgen' : Algebra.adjoin ùí™[K] {gen'} = ‚ä§) {gen'' : ‚Ü•ùí™[L]} (hgen'' : Algebra.adjoin ‚Ü•ùí™[K'] {gen''} = ‚ä§) : G(L/K)^[v].map (AlgEquiv.restrictNormalHom K') = G(K'/K)^[v] := by
  calc
    _ = G(L/K)_[‚åàpsi K L v‚åâ].map (AlgEquiv.restrictNormalHom K') := rfl
    _ = G(K'/K)_[‚åàphi K' L (psi K L v)‚åâ] := herbrand _ hgen hgen'
    _ = G(K'/K)^[v] := by
      rw [‚Üê psi_comp_of_isValExtension (K := K) (K' := K') (L := L) hgen' hgen hgen'']
      simp only [Function.comp_apply, phi_psi_eq_self K' L (psi K K' v) hgen'']
      rfl
