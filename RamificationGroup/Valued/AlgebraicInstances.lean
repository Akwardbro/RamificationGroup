import RamificationGroup.Valued.Hom.ValExtension'
import RamificationGroup.Valuation.Extension
import RamificationGroup.Valued.Hom.Discrete
import RamificationGroup.ForMathlib.Algebra.Algebra.Basic


open DiscreteValuation Valuation Valued ExtDVR IsValExtension Polynomial

-- `IsDiscrete vK.v` may be weakened to `Nontrivial vK.v`.
variable (K L : Type*) [Field K] [Field L] [vK : Valued K ‚Ñ§‚Çò‚ÇÄ] [IsDiscrete vK.v] [vL : Valued L ‚Ñ§‚Çò‚ÇÄ] [Algebra K L] [IsValExtension K L] [FiniteDimensional K L]

section algebra_instances

/-- 1. The conditions might be too strong.
2. The proof is almost the SAME with `Valuation.mem_integer_of_mem_integral_closure`. -/
instance : IsIntegrallyClosed ùí™[K] := by
  rw [isIntegrallyClosed_iff K]
  intro x ‚ü®p, hp‚ü©
  by_cases xne0 : x = 0
  ¬∑ subst xne0; use 0; simp only [_root_.map_zero]
  by_cases vxgt1 : v x ‚â§ 1
  ¬∑ use ‚ü®x, vxgt1‚ü©; rfl
  ¬∑ exfalso
    push_neg at vxgt1
    letI : Invertible x := invertibleOfNonzero xne0
    have : v (aeval x‚Åª¬π (p.reverse - 1)) < 1 := by
      apply aeval_valuationSubring_lt_one_of_lt_one_self
      ¬∑ simp only [coeff_sub, coeff_zero_reverse, hp.1, Monic.leadingCoeff, coeff_one_zero, sub_self]
      ¬∑ apply (one_lt_val_iff v xne0).mp vxgt1
    apply ne_of_lt this
    have : aeval x‚Åª¬π (p.reverse - 1) = -1 := by
      rw [‚Üê add_neg_eq_zero]
      ring_nf
      simp only [_root_.map_add, _root_.map_neg, _root_.map_one, add_neg_cancel_left]
      rw [‚Üê invOf_eq_inv x, aeval_def, Polynomial.eval‚ÇÇ_reverse_eq_zero_iff, hp.2]
    rw [this, Valuation.map_neg, Valuation.map_one]

attribute [local instance 1001] Algebra.toSMul

instance : IsScalarTower ùí™[K] ùí™[L] L := inferInstanceAs (IsScalarTower vK.v.integer vL.v.integer L)

instance [CompleteSpace K] : Algebra.IsIntegral ùí™[K] ùí™[L] where
  isIntegral := by
    intro ‚ü®x, hx‚ü©
    rw [show x ‚àà ùí™[L] ‚Üî x ‚àà vL.v.valuationSubring by rfl,
      (Valuation.isEquiv_iff_valuationSubring _ _).mp
        (extension_valuation_equiv_extendedValuation_of_discrete (IsValExtension.val_isEquiv_comap (R := K) (A := L))),
      ‚Üê ValuationSubring.mem_toSubring, ‚Üê Extension.integralClosure_eq_integer, Subalgebra.mem_toSubring] at hx
    rcases hx with ‚ü®p, hp‚ü©
    refine ‚ü®p, hp.1, ?_‚ü©
    ext
    rw [show (0 : ùí™[L]).val = 0 by rfl, ‚Üê hp.2]
    calc
      _ = ùí™[L].subtype (eval‚ÇÇ (algebraMap ùí™[K] ùí™[L]) ‚ü®x, hx‚ü© p) := rfl
      _ = _ := by
        rw [Polynomial.hom_eval‚ÇÇ]
        simp only [Subring.coeSubtype]
        congr

instance [CompleteSpace K] : IsIntegralClosure ùí™[L] ùí™[K] L := sorry
  -- IsIntegralClosure.of_isIntegrallyClosed ùí™[L] ùí™[K] L

instance : DiscreteValuationRing ùí™[K] :=
  inferInstanceAs (DiscreteValuationRing vK.v.valuationSubring)

theorem aux6 [CompleteSpace K] : DiscreteValuationRing ùí™[L] :=
  valuationSubring_DVR_of_equiv_discrete
    (extension_valuation_equiv_extendedValuation_of_discrete
      (IsValExtension.val_isEquiv_comap (R := K) (A := L)))

/-- Can't be inferred automatically. -/
instance [CompleteSpace K] [Algebra.IsSeparable K L] : IsNoetherian ùí™[K] ùí™[L] :=
  IsIntegralClosure.isNoetherian ùí™[K] K L ùí™[L]

-- noncomputable def PowerBasisValExtension [CompleteSpace K] [Algebra.IsSeparable K L] [Algebra.IsSeparable (LocalRing.ResidueField ùí™[K]) (LocalRing.ResidueField ùí™[L])] : PowerBasis ùí™[K] ùí™[L] :=
--   letI : Nontrivial vL.v := nontrivial_of_valExtension K L
--   letI : DiscreteValuationRing ùí™[L] := aux6 K L
--   PowerBasisExtDVR (integerAlgebra_injective K L)

example [CompleteSpace K] [Algebra.IsSeparable K L] :
  Algebra.FiniteType ùí™[K] ùí™[L] := inferInstance

end algebra_instances

section ramification

section general

variable (K L : Type*) {ŒìK ŒìL : outParam Type*} [Field K] [Field L]
    [LinearOrderedCommGroupWithZero ŒìK] [LinearOrderedCommGroupWithZero ŒìL]
    [Algebra K L] [vK : Valued K ŒìK] [vL : Valued L ŒìL] [IsValExtension K L]

/-- Should be renamed -/
noncomputable def LocalField.ramificationIdx : ‚Ñï :=
  LocalRing.ramificationIdx ùí™[K] ùí™[L]

end general

section discrete

variable (K L : Type*) {ŒìK ŒìL : outParam Type*} [Field K] [Field L]
    [Algebra K L] [FiniteDimensional K L]
    [vK : Valued K ‚Ñ§‚Çò‚ÇÄ] [IsDiscrete vK.v]
    [vL : Valued L ‚Ñ§‚Çò‚ÇÄ] [IsValExtension K L]

open LocalField ExtDVR

-- theorem integerAlgebra_integral_of_integral

#check exists_Uniformizer_ofDiscrete
theorem ramificationIdx_ne_zero [CompleteSpace K] : ramificationIdx K L ‚â† 0 := by
  sorry
  -- letI : DiscreteValuationRing ùí™[L] := aux6 K L
  -- apply ramificationIdx_ne_zero_of_injective_of_integral (integerAlgebra_injective K L)
  -- rw [‚Üê Algebra.isIntegral_iff_isIntegral]
  -- infer_instance

theorem aux0 [CompleteSpace K] [IsDiscrete vL.v] : vL.v = extendedValuation K L := by
  rw [‚Üê isEquiv_iff_eq]
  apply extension_valuation_equiv_extendedValuation_of_discrete val_isEquiv_comap

variable {L} in
theorem aux3 [IsDiscrete vK.v] [IsDiscrete vL.v]
  (x : K) : vL.v (algebraMap K L x) = (vK.v x) ^ (ramificationIdx K L) := by
  sorry


end discrete

#check Ideal.ramificationIdx

end ramification
